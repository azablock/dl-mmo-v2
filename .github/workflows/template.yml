name: GameCI Template 🎮

on: push

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

jobs:
#  testRunner:
#    name: Test in ${{ matrix.testMode }} ✨
#    runs-on: ubuntu-latest
#    strategy:
#      fail-fast: false
#      matrix:
#        testMode:
#          - EditMode
#          - PlayMode
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Create LFS file list
#        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
#
#      - name: Restore LFS cache
#        uses: actions/cache@v2
#        id: lfs-cache
#        with:
#          path: .git/lfs
#          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}
#
#      - name: Git LFS Pull
#        run: |
#          git lfs pull
#          git add .
#          git reset --hard
#
#      - name: Restore Library cache
#        uses: actions/cache@v2
#        with:
#          path: Library
#          key: Library-test-project-${{ matrix.targetPlatform }}
#          restore-keys: |
#            Library-test-project-
#            Library-
#
#      - name: Run tests
#        uses: game-ci/unity-test-runner@v2
#        id: testRunner
#        with:
#          testMode: ${{ matrix.testMode }}
#          checkName: ${{ matrix.testMode }} test results
#          githubToken: ${{ secrets.GITHUB_TOKEN }}
#
#      - uses: actions/upload-artifact@v2
#        with:
#          name: Test results (${{ matrix.testMode }})
#          path: ${{ steps.testRunner.outputs.artifactsPath }}

#  buildWebGL:
#    needs: testRunner
#    name: Build for WebGL 🖥️
#    runs-on: ubuntu-latest
#    strategy:
#      fail-fast: false
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Create LFS file list
#        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
#
#      - name: Restore LFS cache
#        uses: actions/cache@v2
#        id: lfs-cache
#        with:
#          path: .git/lfs
#          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}
#
#      - name: Git LFS Pull
#        run: |
#          git lfs pull
#          git add .
#          git reset --hard
#
#      - name: Restore Library cache
#        uses: actions/cache@v2
#        with:
#          path: Library
#          key: Library-build-WebGL
#          restore-keys: |
#            Library-build-
#            Library-
#
#      - uses: game-ci/unity-builder@v2
#        with:
#          targetPlatform: WebGL
#
#      - uses: actions/upload-artifact@v2
#        with:
#          name: build-WebGL
#          path: build/WebGL

#  buildWindows:
#    needs: testRunner
#    name: Build for Windows 🖥️
#    runs-on: ubuntu-latest
#    strategy:
#      fail-fast: false
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Create LFS file list
#        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
#
#      - name: Restore LFS cache
#        uses: actions/cache@v2
#        id: lfs-cache
#        with:
#          path: .git/lfs
#          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}
#
#      - name: Git LFS Pull
#        run: |
#          git lfs pull
#          git add .
#          git reset --hard
#
#      - name: Restore Library cache
#        uses: actions/cache@v2
#        with:
#          path: Library
#          key: Library-build-StandaloneWindows64
#          restore-keys: |
#            Library-build-
#            Library-
#
#      - uses: game-ci/unity-builder@v2
#        with:
#          targetPlatform: StandaloneWindows64
#
#      - uses: actions/upload-artifact@v2
#        with:
#          name: build-StandaloneWindows64
#          path: build/StandaloneWindows64
  
  buildLinuxHeadlessServer:
#    needs: testRunner
    name: Build for Linux Headless Server 🖥️
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      - name: Restore Library cache
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-build-StandaloneLinux64
          restore-keys: |
            Library-build-
            Library-

      - name: Run Unity builder
        uses: game-ci/unity-builder@v2
        with:
          targetPlatform: StandaloneLinux64
          customParameters: -EnableHeadlessMode -dl-server-address {{secrets.SSH_HOST}} -dl-server-port 7777
  
      - uses: actions/upload-artifact@v2
        with:
          name: build-StandaloneLinux64
          path: build/StandaloneLinux64

#  createTempFile:
#    name: create temp file
#    runs-on: ubuntu-latest
#    steps:
#      - name: make the temp file
#        run: mkdir test && touch test/olek_test_file.txt
#      - name: list files
#        run: ls -al
#      - name: upload artifact
#        uses: actions/upload-artifact@v2
#        with:
#          name: olek_test_file.txt
#          path: test/olek_test_file.txt

  copyLinuxBuildViaScp:
    name: Copy Linux Build via scp
    needs: buildLinuxHeadlessServer
    runs-on: ubuntu-latest
    steps:
      - name: checkout #to chyba niepotrzebne
        uses: actions/checkout@v2

      - name: download artifact
        uses: actions/download-artifact@v3
        with:
          name: build-StandaloneLinux64
          path: build/StandaloneLinux64
          
      - name: list files
        run: ls -al
        
      - name: Copy folder content recursively to remote
        uses: garygrossgarten/github-action-scp@release
        with:
          local: build/StandaloneLinux64
          remote: dl-mmo-server-build-upload
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
  
#  restartGameServerViaSsh:
#    name: Restart game server via ssh
#    needs: copyLinuxBuildViaScp
#    runs-on: ubuntu-latest
#    steps:
#    - name: restart game server via ssh
#      uses: appleboy/ssh-action@master
#      with:
#        host: ${{ secrets.SSH_HOST }}
#        username: ${{ secrets.SSH_USER }}
#        password: ${{ secrets.SSH_PASSWORD }}
#        script: ./restart-dl-mmo-server.sh &

#  copyLinuxBuildViaSsh_V2:
#    needs: buildLinuxHeadlessServer
#    runs-on: ubuntu-latest
#    steps:
#      - name: SSH Remote Commands
#      - uses: appleboy/ssh-action@v0.1.4
#        



#      - name: Copy via ssh
#        uses: garygrossgarten/github-action-scp@v0.7.3



#  buildAndroid:
#    needs: testRunner
#    name: Build for Android 📱
#    runs-on: ubuntu-latest
#    strategy:
#      fail-fast: false
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Create LFS file list
#        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
#
#      - name: Restore LFS cache
#        uses: actions/cache@v2
#        id: lfs-cache
#        with:
#          path: .git/lfs
#          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}
#
#      - name: Git LFS Pull
#        run: |
#          git lfs pull
#          git add .
#          git reset --hard
#
#      - name: Restore Library cache
#        uses: actions/cache@v2
#        with:
#          path: Library
#          key: Library-build-Android
#          restore-keys: |
#            Library-build-
#            Library-
#
#      - uses: game-ci/unity-builder@v2
#        with:
#          targetPlatform: Android
#
#      - uses: actions/upload-artifact@v2
#        with:
#          name: build-Android
#          path: build/Android


#  deployPages:
#    needs: buildWebGL
#    name: Deploy to Github Pages 🚀
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - uses: actions/download-artifact@v2
#        with:
#          name: build-WebGL
#          path: build
#
#      - name: Deploy 🚀
#        uses: JamesIves/github-pages-deploy-action@4.1.4
#        with:
#          branch: gh-pages
#          folder: build/WebGL